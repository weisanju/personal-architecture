---
- name: Gather OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution|lower }}.yml"
    - "{{ ansible_os_family|lower }}.yml"
    - "default.yml"
  tags:
    - always

# 初始化所有目录
- name: 初始化所有工作目录
  shell: |
    # 清理旧的构建目录
    rm -rf /tmp/build
    rm -rf {{ build_dir }}
    rm -rf /tmp/gdbuspp-master
    rm -rf /tmp/xxhash
    rm -rf /tmp/asio-asio-1-24-0
    
    # 创建新的构建目录
    mkdir -p /tmp/build
    mkdir -p /tmp/build/gdbuspp
    mkdir -p /tmp/xxhash
    mkdir -p {{ build_dir }}
    mkdir -p {{ build_dir }}/openvpn3-linux/vendor/asio/asio/include
    mkdir -p {{ build_dir }}/openvpn3-linux/build
  args:
    executable: /bin/bash
  become: yes


- name: 解压gdbuspp代码库
  unarchive:
    src: "files/gdbuspp/gdbuspp-master.tar.gz"
    dest: "/tmp/build/"
  become: yes

- name: 构建并安装gdbuspp (步骤1 - 配置)
  command: meson setup --prefix=/usr --buildtype=release build
  args:
    chdir: "/tmp/build/gdbuspp"
  become: yes
  register: gdbuspp_configure
  changed_when: true

- name: 查看gdbuspp配置日志
  debug:
    var: gdbuspp_configure.stdout_lines
  when: gdbuspp_configure is defined

- name: 构建并安装gdbuspp (步骤2 - 编译)
  command: meson compile -C build
  args:
    chdir: "/tmp/build/gdbuspp"
  become: yes
  register: gdbuspp_build
  changed_when: true
  # 当文件存在时：/usr/include/gdbuspp then skip


- name: 构建并安装gdbuspp (步骤3 - 安装)
  command: meson install -C build
  become: yes
  register: gdbuspp_install
  changed_when: true
  args:
    chdir: "/tmp/build/gdbuspp"

- name: 查看gdbuspp安装日志
  debug:
    var: gdbuspp_install.stdout_lines
  when: gdbuspp_install is defined
    


# 下载并安装xxHash
- name: 解压xxHash库
  unarchive:
    src: "files/xxhash/xxhash-0.8.1.tar.gz"
    dest: "/tmp/xxhash"
  become: yes

- name: 构建并安装xxHash
  command: "{{ item }}"
  args:
    chdir: "/tmp/xxhash/xxHash-0.8.1"
  with_items:
    - make
    - make install
  become: yes


- name: 更新库缓存
  command: ldconfig
  become: yes
  changed_when: false

# 确保pkgconfig目录存在并配置
- name: 安装和配置pkgconfig及创建配置文件
  shell: |
    # 安装pkgconfig
    if [ -f /etc/debian_version ]; then
      apt-get install -y pkg-config
    elif [ -f /etc/redhat-release ]; then
      yum install -y pkgconfig
    fi

    # 创建pkgconfig目录
    if [ ! -d /usr/lib/pkgconfig ] && [ ! -d /usr/lib64/pkgconfig ]; then
      mkdir -p /usr/lib/pkgconfig
      chmod 755 /usr/lib/pkgconfig
    fi

    # 确定pkgconfig目录路径
    if [ -d /usr/lib64/pkgconfig ]; then
      PKGCONFIG_PATH=/usr/lib64/pkgconfig
    else
      PKGCONFIG_PATH=/usr/lib/pkgconfig
    fi

    # 创建gdbuspp.pc文件
    cat > ${PKGCONFIG_PATH}/gdbuspp.pc << 'EOF'
prefix=/usr
exec_prefix=${prefix}
includedir=${prefix}/include
libdir=${prefix}/lib

Name: gdbuspp
Description: GDBus++ library
Version: 1.0.0
Cflags: -I${includedir}/gdbuspp
Libs: -L${libdir} -lgdbuspp
EOF
    chmod 644 ${PKGCONFIG_PATH}/gdbuspp.pc
    
    # 设置PKG_CONFIG_PATH环境变量
    export PKG_CONFIG_PATH=${PKGCONFIG_PATH}:${PKG_CONFIG_PATH}
    
    # 添加到系统环境变量配置
    if [ ! -f /etc/profile.d/pkgconfig.sh ]; then
      echo "export PKG_CONFIG_PATH=${PKGCONFIG_PATH}:\${PKG_CONFIG_PATH}" > /etc/profile.d/pkgconfig.sh
      chmod +x /etc/profile.d/pkgconfig.sh
    fi
    
    # 确保当前shell可以找到
    echo "PKG_CONFIG_PATH is now: ${PKG_CONFIG_PATH}"
    pkg-config --list-all | grep gdbuspp || echo "gdbuspp not found in pkg-config"
  args:
    executable: /bin/bash
  become: yes
  register: pkgconfig_setup
  changed_when: pkgconfig_setup.stdout != ""

- name: 检查gdbuspp是否已成功安装
  shell: |
    export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig:${PKG_CONFIG_PATH}
    pkg-config --exists --print-errors gdbuspp
  args:
    executable: /bin/bash
  register: gdbuspp_check
  changed_when: false
  become: yes
  ignore_errors: yes

- name: 显示gdbuspp检查结果
  debug:
    msg: "gdbuspp安装状态: {{ 'SUCCESS' if gdbuspp_check.rc == 0 else 'FAILED - ' + gdbuspp_check.stderr }}"

- name: 安装必要的依赖 (Debian/Ubuntu)
  command: >
    apt-get update && apt-get install -y {{ debian_dependencies | join(' ') }}
  when: ansible_os_family == 'Debian'
  become: yes
  register: apt_result
  changed_when: "'0 upgraded, 0 newly installed' not in apt_result.stdout"

- name: 安装DCO依赖 (Debian/Ubuntu)
  command: >
    apt-get install -y {{ dco_dependencies | join(' ') }}
  when: 
    - ansible_os_family == 'Debian'
    - enable_dco | bool
  become: yes
  register: apt_dco_result
  changed_when: "'0 upgraded, 0 newly installed' not in apt_dco_result.stdout"

- name: 安装必要的依赖 (RedHat/CentOS)
  command: >
    yum install -y {{ redhat_dependencies | join(' ') }}
  when: ansible_os_family == 'RedHat'
  become: yes
  register: yum_result
  changed_when: "'Nothing to do' not in yum_result.stdout"

- name: 安装DCO依赖 (RedHat/CentOS)
  command: >
    yum install -y {{ dco_dependencies | join(' ') }}
  when: 
    - ansible_os_family == 'RedHat'
    - enable_dco | bool
  become: yes
  register: yum_dco_result
  changed_when: "'Nothing to do' not in yum_dco_result.stdout"

# 安装ASIO依赖库
- name: 解压ASIO库到目标目录
  unarchive:
    src: "files/asio/asio-1-24-0.tar.gz"
    dest: "{{ build_dir }}/openvpn3-linux/vendor/asio/asio/include"
    extra_opts:
      - --strip-components=3
      - --wildcards
      - '*/include/*'
  become: yes


- name: 配置OpenVPN3项目 (CMake)
  command: >
    cmake -DCMAKE_BUILD_TYPE=Release 
    -DASIO_INCLUDE_DIR={{ build_dir }}/openvpn3-linux/vendor/asio/asio/include 
    -DXXHASH_INCLUDE_DIR=/usr/local/include
    -DXXHASH_LIBRARY=/usr/local/lib/libxxhash.so
    -DBUILD_TESTING=OFF
    ..
  args:
    chdir: "{{ build_dir }}/openvpn3-linux/build"
  register: cmake_result

- name: 显示CMake配置结果
  debug:
    var: cmake_result.stdout_lines
  when: cmake_result is defined

- name: 构建OpenVPN3项目
  command: make
  args:
    chdir: "{{ build_dir }}/openvpn3-linux/build"
  when: cmake_result is defined and cmake_result.rc == 0
  register: build_result

- name: 显示构建结果
  debug:
    var: build_result.stdout_lines
  when: build_result is defined


- name: 手动安装OpenVPN3 CLI
  command: cp {{ build_dir }}/openvpn3-linux/build/test/ovpncli/ovpncli /usr/local/bin/
  become: yes
  when: build_result is defined and build_result.rc == 0

- name: 创建OpenVPN3头文件目录
  file:
    path: /usr/local/include/openvpn
    state: directory
    mode: '0755'
  become: yes
  when: build_result is defined and build_result.rc == 0

- name: 复制OpenVPN3头文件
  shell: cp -R {{ build_dir }}/openvpn3-linux/openvpn/* /usr/local/include/openvpn/
  args:
    executable: /bin/bash
  become: yes
  when: build_result is defined and build_result.rc == 0

- name: 重新加载D-Bus服务
  systemd:
    name: dbus
    state: reloaded
  become: yes

- name: 写入OpenVPN3配置文件
  command: openvpn3-admin init-config --write-configs
  become: yes
  when: write_configs | bool
  changed_when: true
  ignore_errors: yes  # 防止openvpn3-admin不在PATH中导致错误

- name: 启用并启动OpenVPN3服务
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - openvpn3-session@.service
    - openvpn3-autoload@.service
  become: yes